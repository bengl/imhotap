#!/usr/bin/env node
'use strict';

const { promisify } = require('util');
const glob = promisify(require('glob'));
const makeTap = require('make-tap-output');
const pLimit = require('p-limit');
require('array-flat-polyfill');
const exec = require('./lib/exec');
const { files, concurrency, quieter } = require('./lib/options');
const outputPipe = require('./lib/output');

const processFile = tap => result => {
  const file = result.file;
  const trimmedOut = result.out.trim();
  const trimmedErr = result.err.trim();
  const ok = result.code === 0;
  process.exitCode = process.exitCode || (ok ? 0 : 1);
  if (quieter || (!trimmedOut.length && !trimmedErr.length)) {
    tap.result({ ok, message: file });
  } else if (trimmedOut.startsWith('TAP version ')) {
    tap.writeln(`# Subtest: ${file}`);
    const tabbed = trimmedOut.split('\n')
      .filter(x => !x.startsWith('TAP version '))
      .map(x => '    ' + x)
      .join('\n');
    tap.writeln(tabbed)
    tap.result({ ok, message: file });
  } else if (trimmedErr.startsWith('TAP version ')) {
    tap.writeln(`# Subtest: ${file}`);
    const tabbed = trimmedErr.split('\n')
      .filter(x => !x.startsWith('TAP version '))
      .map(x => '    ' + x)
      .join('\n');
    tap.writeln(tabbed)
    tap.result({ ok, message: file });
  } else {
    tap.result({
      ok,
      message: file,
      dataObj: {
        stdout: trimmedOut,
        stderr: trimmedErr
      }
    });
  }
};

async function multiGlob(files) {
  const allFiles = await Promise.all(files.map(pattern => glob(pattern)));
  return Array.from(new Set(allFiles.flat())).sort();
}

async function quickOrderedMap(promises, fn) {
  for await (const p of promises) {
    fn(p);
  }
}

(async () => {
  const tap = makeTap({count: true});
  const output = outputPipe();
  tap.pipe(output);
  const filesToTest = await multiGlob(files);
  tap.plan(filesToTest.length);
  const limit = pLimit(concurrency || Infinity);
  await quickOrderedMap(filesToTest.map(f => limit(() => exec(f))), processFile(tap));
  output.end();
})().catch(e => {
  console.error(e);
  process.exitCode = 1;
});
